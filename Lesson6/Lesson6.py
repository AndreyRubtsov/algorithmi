# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# ● выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# ● написать 3 варианта кода (один у вас уже есть);
# ● проанализировать 3 варианта и выбрать оптимальный;
# ● результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
# Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# ● написать общий вывод: какой из трёх вариантов лучше и почему.
# Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
# проявили творчество, фантазию и создали универсальный код для замера памяти.

# В диапазоне натуральных чисел от 2 до 99 определить, сколько из них кратны каждому из чисел в диапазоне от 2 до 9.
import sys


def show2(x):
    memory_ = 0

    print(f'type={type(x)}, size={sys.getsizeof(x)}, obj={x}')
    memory_ += sys.getsizeof(x)
    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for key, value in x.items():
                memory_ += show2(key)
                memory_ += show2(value)
        elif not isinstance(x, str):
            for item in x:
                memory_ += show2(item)

    print('*' * 50, memory_, '*' * 50, )
    return memory_


#########################################
#########################################

# array2_99 = [i for i in range(2, 100)]
# array2_9 = [i for i in range(2, 10)]
# # show2(array2_99)
#
# for j in array2_9:
#     count = 0
#     for i in array2_99:
#         if i % j == 0:
#             count += 1
#     print(f'кратны {j} - {count}')

# памяти использовано- 4080 байт. 56 на j,count,  360 на список (2,10),3664 на список (2,100)

#
# # print('*' * 150)
# #
# array2_99_2 = {i for i in range(2, 100)}
# array2_9_2 = {i for i in range(2, 10)}
# # show2(array2_9_2)
# # show2(array2_99_2)
# for j in array2_9_2:
#     count = 0
#     for i in array2_99_2:
#         if i % j == 0:
#             count += 1
#     print(f'кратны {j} - {count}')

# памяти использовано- 12192 байт. 56 на j,count,  968 на список (2,10),11168 на список (2,100)


array2_99_3 = tuple(i for i in range(2, 100))
array2_9_3 = tuple(i for i in range(2, 10))
show2(array2_9_3)
# show2(array2_99_3)
for j in array2_9_3:
    count = 0
    for i in array2_99_3:
        if i % j == 0:
            count += 1
    print(f'кратны {j} - {count}')
# памяти использовано- 3984 байт. 56 на j,count,  344 на список (2,10),3584 на список (2,100)

# Ubuntu 18.04.4  x86_64 Python 3.8.2
# Вывод. Задача по нахождению натуральных чисел от 2 до 99 была решена 3 способами.  Список, словарь, кортеж.
# Словарь оказался самый пожирающий память способ инициализации переменных. Список и кортеж показали примерно похожие
# результаты, но кортеж чуть поменьше съел памяти.
